#!/usr/bin/env python3
"""Process URLs

Copyright (c) 2018-2019 Thomas Hungenberg

Licensed under GNU Affero General Public License v3.0
<http://www.gnu.org/licenses/agpl-3.0.html>

This script takes a list of URLs like
http://www.example.com/path/file.ext
as input and returns the (sanitized) URL along with the
IP address the hostname resolves to in CSV format:
"123.45.67.89","http://www[.]example[.]com/path/file.ext"
Optionally adds AS number and description and checks
HTTP status code for http(s) URLs.

Output is printed to stdout, errors to stderr.
"""

import argparse
import io
import sys
import re
import csv
import irnettools.validate
import irnettools.errors
import irnettools.lookup
import irnettools.progress
import urllib.request

if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage='%(prog)s [-acns] <filename>',
                                     description='Process URLs.')
    parser.add_argument('filename', nargs=1, help='file containing URLs. Use \'-\' as filename to read from stdin.')
    parser.add_argument('-c', action='store_true', help='do not add CSV header to output')
    parser.add_argument('-n', action='store_true', help='check HTTP status code for http(s) URLs')
    parser.add_argument('-p', action='store_true', help='show progress information')
    parser.add_argument('-s', action='store_true', help='sanitize host in output')
    parser.add_argument('-v', '--version', action='version',
                        version='IRNetTools %(prog)s version {}'.format(irnettools.version),
                        help='show the version number and exit')
    args = parser.parse_args()

    try:
        lookup = irnettools.lookup.Lookup()
    except (ImportError, irnettools.errors.ConfigError, irnettools.errors.MaxmindError) as e:
        print('Error: %s' % str(e), file=sys.stderr)
        exit(1)

    if args.p:
        try:
            progress = irnettools.progress.Progress(args.filename[0])
        except irnettools.errors.ProgressError as e:
            print('Error: %s' % str(e), file=sys.stderr)
            exit(1)

    try:
        with io.open(args.filename[0], 'r') if args.filename[0] is not "-" else sys.stdin as urlfile:
            output = csv.writer(sys.stdout, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)
            linenumber = 0
            if not args.c:
                header = ['ip', 'url']
                if args.n:
                    header = header + ['http_status']
                output.writerow(header)
            for line in urlfile:
                if args.p:
                    progress.next()

                linenumber += 1
                ip = None
                status = None

                if re.match("^\s*$", line):
                    # skip lines that are empty or only containing blanks
                    continue

                try:
                    # split record into protocol, host and path
                    m = re.match("^([a-zA-Z]+)(:\/\/)([^\/]+)(\/[\x20-\x7f]*)?$", line.strip())
                    proto = m.group(1).lower()
                    host = m.group(3).lower()
                    if m.group(4):
                        path = m.group(4)
                    else:
                        path = ''
                except:
                    print('Invalid record in line %d' % linenumber, file=sys.stderr)
                    continue

                if irnettools.validate.hostname(host):
                    # valid hostname
                    try:
                        ip = lookup.ip(host)
                    except irnettools.errors.DNSError as e:
                        print('Error: %s' % str(e), file=sys.stderr)

                    if not ip:
                        print('Hostname \'%s\' does not resolve' % host, file=sys.stderr)

                elif irnettools.validate.ip(host):
                    # valid IP
                    ip = host

                else:
                    print('Neither valid hostname nor IP address in line %d.' % linenumber, file=sys.stderr)

                url = proto + "://" + host + path

                if ip:
                    # check HTTP status code
                    if args.n and ip and re.match('^https?$', proto):
                        try:
                            status = urllib.request.urlopen(url, timeout=10).getcode()
                        except urllib.error.HTTPError as e:
                            status = e.code
                        except urllib.error.URLError as e:
                            print("Error connecting to %s" % host,  file=sys.stderr)
                        except Exception as e:
                            print("Error: %s" % str(e),  file=sys.stderr)
                            status = ""
                else:
                    ip = ""

                if args.s:
                    # sanitize url
                    url = proto + "://" + host.replace(".", "[.]") + path

                row = [ip, url]
                if args.n:
                    if status:
                        row = row + [status]
                    else:
                        row = row + ['']

                output.writerow(row)

        exit(0)

    except IOError:
        print("Unable to open input file")
        exit(1)

#
