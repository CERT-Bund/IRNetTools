#!/usr/bin/env python3
"""hostinfo

Copyright (c) 2018-2019 Thomas Hungenberg

Licensed under GNU Affero General Public License v3.0
<http://www.gnu.org/licenses/agpl-3.0.html>

This script takes a single hostname/IP address or a file containing
a list of hostnames/IP addresses (one record per line) as input
and returns the hostname and corresponding IP address along with
AS number, organization and country information in CSV format
for each record:
"ip","hostname","asn","org","country"
"123.45.67.89","www.example.com","12345","Provider Inc.","US"

Output is printed to stdout, errors to stderr.
"""

import argparse
import sys
import io
import re
import csv
import irnettools.validate
import irnettools.errors
import irnettools.lookup
import irnettools.progress
from irnettools.io import printerror

def hostinfo(host):
    # check if input is a valid IP address
    if irnettools.validate.ip(host):
        ip = host
        hostname = ''
        try:
            hostname = lookup.hostname(ip)
        except irnettools.errors.DNSError as e:
            printerror(str(e))

    # check if input is a valid hostname
    elif irnettools.validate.hostname(host):
        hostname = host
        ip = None
        try:
            ip = lookup.ip(host)
        except irnettools.errors.DNSError as e:
            printerror(str(e))
        if not ip:
            printerror('Hostname does not resolve: %s' % host)
            return None

    else:
        printerror('Not a valid IP address nor a valid hostname: %s' % host)
        return None

    info = [ip, hostname]
    # get ASN, organization and country for IP
    asn = ''
    try:
        asn = lookup.asn(ip)
    except irnettools.errors.DNSError as e:
        printerror(str(e))
    info = info + [asn]

    organization = ''
    try:
        organization = lookup.organization(ip)
    except irnettools.errors.DNSError as e:
        printerror(str(e))
    info = info + [organization]

    country = ''
    try:
        country = lookup.country(ip)
    except irnettools.errors.DNSError as e:
        printerror(str(e))
    info = info + [country]

    return info

if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage='%(prog)s <host> | -f <filename>',
                                     description='Return AS number, organization and country for hostnames or IP addresses',
                                     epilog='Specify either a single hostname/IP address or use\
                                     -f <filename> to process a list of hostnames/IP addresses.')
    group = parser.add_argument_group()
    group.add_argument('host', nargs='?', help='single hostname or IP address')
    group.add_argument('-f', metavar='filename', nargs=1, help='file containing list of hostnames/IP addresses. Use \'-\' as filename to read from stdin.')
    group.add_argument('-c', action='store_true', help='do not add CSV header to output')
    group.add_argument('-p', action='store_true', help='show progress information')
    group.add_argument('-v', '--version', action='version',
                       version='IRNetTools %(prog)s version {}'.format(irnettools.version),
                       help='show the version number and exit')
    args = parser.parse_args()

    output = csv.writer(sys.stdout, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)

    try:
        lookup = irnettools.lookup.Lookup()
    except (ImportError, irnettools.errors.ConfigError, irnettools.errors.MaxmindError) as e:
        printerror(str(e))
        exit(1)

    if (args.host and args.f) or (not args.host and not args.f):
        parser.print_help()
        exit(0)

    elif (args.host):
        # single hostname/IP
        info = hostinfo(args.host.strip())
        if info:
            if not args.c:
                output.writerow(['ip','hostname','asn','org','country'])
            output.writerow(info)

    elif (args.f):
        if args.p:
            try:
                progress = irnettools.progress.Progress(args.f)
            except irnettools.errors.ProgressError as e:
                printerror(str(e))
                exit(1)

        # filename
        try:
            with io.open(args.f[0], 'r') if args.f is not "-" else sys.stdin as infile:
                linenumber = 0
                if not args.c:
                    output.writerow(['ip','hostname','asn','org','country'])
                for line in infile:
                    if args.p:
                        progress.next()
                    asn = None
                    organization = None
                    country = None
                    linenumber += 1
                    host = line.strip()
                    info = hostinfo(host)
                    if info:
                        output.writerow(info)

        except IOError as e:
            printerror('Unable to open input file: %s' % str(e))
            exit(1)

#
